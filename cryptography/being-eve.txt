Kyra Helmbold

----- Diffie Hellman ------
The shared secret is 6.

Code is below.

g = 7
p = 61
a = 30
b = 17

for x in range(p):
    for y in range(p):
        if (g**x) % p == a and (g**y) % p == b:
            if (b**x) % p == (a**y) % p:
                print("Alice's secret number(x) =", x)
                print("Bob's secret number(y) =", y)
                print("The shared secret is  (g**(x*y)) % p)", (g**(x*y)) % p)
                print("Another way of calculating it is: (a**y) % 61",  (a**y) % 61)
                print("A third way of calculating it is: (b**x) % 61",  (b**x) % 61)
This prints:
Alice's secret number(x) = 41
Bob's secret number(y) = 23
The shared secret is  (g**(x*y)) % p) 6
Another way of calculating it is: (a**y) % 61 6
A third way of calculating it is: (b**x) % 61 6

If the integers were larger, the for loops would take a lot more time, and it would be a lot more work for the for loops and for the exponentiation.

----- RSA ------
for i in range(13, 5561):
    for j in range(13, 5561):
        if i *j == n_Bob:
            print (i, j)
            break
    # p & q are 67 and 83

p = 67
q = 83


This method is insecure because there is a lot of repetition. For example, 3860 repeats a few times, 1511 repeats a few times, 2442 repeats a few times, etc. People could figure out what is happening by trying common characters/sequences for those spots.





